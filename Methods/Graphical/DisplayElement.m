function DisplayElement( element,position,dimension,handles )
%DISPLAY Summary of this function goes here
%   Detailed explanation goes here


axes(handles.axes1);
axis([0 100 0 100]);
if isequal(element{1,1},'Source')
    %Cas ou on a affaire à une source
    bords=rectangle('Position',[position{1,1}+1,...
        position{1,2}+1,...
        dimension{1,1}-1,...
        dimension{1,2}-1],...
        'LineWidth',1);
    if dimension{1,1}>dimension{1,2}
        %Case where width>length
        r=rectangle('Position',[position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
            position{1,2}+dimension{1,2}/3,...
            dimension{1,2}/3,...
            dimension{1,2}/3],...
            'Curvature',1,...
            'EdgeColor','b');
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/6 position{1,2}+dimension{1,2}/3]);
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/6+dimension{1,2}/2 position{1,2}+dimension{1,2}/3+dimension{1,2}/2]);
        %Affichage du nom
        name=[element{5,1},element{2,1}];
        [~,taille]=size(name);
        text(position{1,1}+dimension{1,1}/2-taille/2,position{1,2}+dimension{1,2}/2,name);
        %Affichage des labels des deux nodes
        node1=element{3,1};
        node2=element{4,1};
        if isequal(node1,'0');
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/6 position{1,2}+dimension{1,2}/6]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/6-2 position{1,2}+dimension{1,2}/6-2]);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/3+dimension{1,2}/2+1,name);
        elseif isequal(node2,'0')
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/6 position{1,2}+dimension{1,2}/6]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/6-2 position{1,2}+dimension{1,2}/6-2]);
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/3+dimension{1,2}/2+1,name);
        else
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/6-2,name);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/3+dimension{1,2}/2+1,name);
        end
    else
        r=rectangle('Position',[position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
            position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
            dimension{1,1}/3,...
            dimension{1,1}/3],...
            'Curvature',1,...
            'EdgeColor','b');
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/2-dimension{1,1}/3 position{1,2}+dimension{1,2}/2-dimension{1,1}/6]);
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/2+dimension{1,1}/6 position{1,2}+dimension{1,2}/2+dimension{1,1}/3]);
        name=[element{5,1},element{2,1}];
        [~,taille]=size(name);
        text(position{1,1}+dimension{1,1}/2-taille/2,position{1,2}+dimension{1,2}/2,name);
        %Affichage des labels des deux nodes
        node1=element{3,1};
        node2=element{4,1};
        if isequal(node1,'0');
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3 position{1,2}+dimension{1,2}/2-dimension{1,1}/3]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2 position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2]);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/2+dimension{1,1}/3+1,name);
        elseif isequal(node2,'0')
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3 position{1,2}+dimension{1,2}/2-dimension{1,1}/3]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2 position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2]);
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/2+dimension{1,1}/3+1,name);
        else
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/2+dimension{1,1}/3+1,name);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2,position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2,name);
        end
    end
elseif isequal(element{1,1},'element')
    %Cas ou on a affaire à un element 
    %Ou un transistor
    bords=rectangle('Position',[position{1,1}+1,...
        position{1,2}+1,...
        dimension{1,1}-1,...
        dimension{1,2}-1],...
        'LineWidth',1);
    if dimension{1,1}>dimension{1,2}
        %Case where width>length
        if isequal(element{5,1},'R')
            CreateResistor(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3);
        elseif isequal(element{5,1},'C')
            CreateCapacitor(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3);
        elseif isequal(element{5,1},'L')
            CreateInductance(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3);
        elseif isequal(element{5,1},'D')
            CreateDiode(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3);
        elseif isequal(element{5,1},'K')
            CreateMutual(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3);
        else
            CreateMutual(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3);
        end
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/6 position{1,2}+dimension{1,2}/3]);
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/6+dimension{1,2}/2 position{1,2}+dimension{1,2}/3+dimension{1,2}/2]);
        %Affichage du nom
        name=[element{5,1},element{2,1}];
        [~,taille]=size(name);
        text(position{1,1}+dimension{1,1}/2-taille/2,position{1,2}+dimension{1,2}/2,name);
        %Affichage des labels des deux nodes
        node1=element{3,1};
        node2=element{4,1};
        if isequal(node1,'0');
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/6 position{1,2}+dimension{1,2}/6]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/6-2 position{1,2}+dimension{1,2}/6-2]);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/3+dimension{1,2}/2+1,name);
        elseif isequal(node2,'0')
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/6 position{1,2}+dimension{1,2}/6]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/6-2 position{1,2}+dimension{1,2}/6-2]);
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/3+dimension{1,2}/2+1,name);
        else
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/6-2,name);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/3+dimension{1,2}/2+1,name);
        end
    else
        if isequal(element{5,1},'R')
            CreateResistor(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3);
        elseif isequal(element{5,1},'C')
            CreateCapacitor(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3);
        elseif isequal(element{5,1},'L')
            CreateInductance(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3);
        elseif isequal(element{5,1},'D')
            CreateDiode(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3);
        elseif isequal(element{5,1},'K')
            CreateMutual(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3);
        else
            CreateMutual(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3);
        end
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/2-dimension{1,1}/3 position{1,2}+dimension{1,2}/2-dimension{1,1}/6]);
        line([position{1,1}+dimension{1,1}/2 position{1,1}+dimension{1,1}/2],...
            [position{1,2}+dimension{1,2}/2+dimension{1,1}/6 position{1,2}+dimension{1,2}/2+dimension{1,1}/3]);
        name=[element{5,1},element{2,1}];
        [~,taille]=size(name);
        text(position{1,1}+dimension{1,1}/2-taille/2,position{1,2}+dimension{1,2}/2,name);
        %Affichage des labels des deux nodes
        node1=element{3,1};
        node2=element{4,1};
        if isequal(node1,'0');
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3 position{1,2}+dimension{1,2}/2-dimension{1,1}/3]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2 position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2]);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/2+dimension{1,1}/3+1,name);
        elseif isequal(node2,'0')
            line([position{1,1}+dimension{1,1}/2-5 position{1,1}+dimension{1,1}/2+5],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3 position{1,2}+dimension{1,2}/2-dimension{1,1}/3]);
            line([position{1,1}+dimension{1,1}/2-2 position{1,1}+dimension{1,1}/2+2],...
                [position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2 position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2]);
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/2+dimension{1,1}/3+1,name);
        else
            name=node1;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2, position{1,2}+dimension{1,2}/2+dimension{1,1}/3+1,name);
            name=node2;
            [~,taille]=size(name);
            text(position{1,1}+dimension{1,1}/2-taille/2,position{1,2}+dimension{1,2}/2-dimension{1,1}/3-2,name);
        end
    end
elseif isequal(element{1,1},'Bipolar')||isequal(element{1,1},'JFET')||isequal(element{1,1},'MOSFET')
    %Cas ou on a affaire à un element 
    %Ou un transistor
    bords=rectangle('Position',[position{1,1}+1,...
        position{1,2}+1,...
        dimension{1,1}-1,...
        dimension{1,2}-1],...
        'LineWidth',1);
    if dimension{1,1}>dimension{1,2}
        %length>width
        CreateTransistor(position{1,1}+dimension{1,1}/2-dimension{1,2}/6,...
                position{1,2}+dimension{1,2}/3,...
                dimension{1,2}/3,...
                dimension{1,2}/3,...
                element);
    else
        CreateTransistor(position{1,1}+dimension{1,1}/2-dimension{1,1}/6,...
                position{1,2}+dimension{1,2}/2-dimension{1,1}/6,...
                dimension{1,1}/3,...
                dimension{1,1}/3,...
                element);
    end
else
    bords=rectangle('Position',[position{1,1}+1,...
        position{1,2}+1,...
        dimension{1,1}-1,...
        dimension{1,2}-1],...
        'LineWidth',1);
    %cas ou on a un subcircuit
    rectangle('Position',[position{1,1}+0.2*dimension{1,1},...
        position{1,2}+dimension{1,2}*3/10,...
        dimension{1,1}*8/13,...
        dimension{1,2}*4/10],...
        'Curvature',0.2);
    %Affichage du nom
    name=element{2,1};
    text(position{1,1}+0.2*dimension{1,1}+(dimension{1,1}*8/13)/2,...
        position{1,2}+dimension{1,2}*3/10+(dimension{1,2}*4/10)/2,...
        name);
    %affichage des ports
    [nb_ports,~]=size(element{3,1});
    largeur_sub=dimension{1,1}*8/13;
    ratiolargeur=largeur_sub/(nb_ports/2+1);
    start_positionXup=position{1,1}+0.2*dimension{1,1};
    start_positionYup=position{1,2}+dimension{1,2}*3/10+dimension{1,2}*4/10;
    start_positionYdown=position{1,2}+dimension{1,2}*3/10;
    currentX=ratiolargeur;
    for i=1:nb_ports
        if mod(i,2)==0
            xdepart=start_positionXup+currentX;
            ydepart=start_positionYup;
            xarrive=start_positionXup+currentX;
            yarrive=start_positionYup+(1/6)*dimension{1,2}-1;
            line([xdepart xarrive],[ydepart yarrive]);
            currentX=currentX+ratiolargeur;
            text(xarrive,yarrive,element{4,1}{i,1});
            text(xarrive,ydepart-2,element{3,1}{i,1});
        else
            xdepart=start_positionXup+currentX;
            ydepart=start_positionYdown;
            xarrive=start_positionXup+currentX;
            yarrive=start_positionYdown-(1/6)*dimension{1,2}-1;
            line([xdepart xarrive],[ydepart yarrive]);
            text(xarrive,yarrive,element{4,1}{i,1});
            text(xarrive,ydepart+1,element{3,1}{i,1});
        end
    end
end
axis([0 100 0 100]);
axis off;
end

